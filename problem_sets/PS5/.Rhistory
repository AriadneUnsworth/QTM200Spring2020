# remove objects
rm(list=ls())
#####################
# load libraries
# set wd
# clear global .envir
#####################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
# ex: stringr
# lapply(c("stringr"),  pkgTest)
lapply(c("faraway"),  pkgTest)
# set working directory
setwd("~/Documents/GitHub/QTM200Spring2020/problem_sets/PS5")
#####################
# Problem 1
#####################
# load data
gamble <- (data=teengamb)
# run regression on gamble with specified predictors
model1 <- lm(gamble ~ sex + status + income + verbal, gamble)
View(gamble)
#check the constant variance assumption
par(mfrow = c(2,2); plot(model1))
#check the constant variance assumption
par(mfrow = c(2,2), plot(model1))
#check the constant variance assumption
par(mfrow = c(2,2), plot(model1))
plot(model1)
rm(list=ls())
plot(model1)
# run regression on gamble with specified predictors
model1 <- lm(gamble ~ sex + status + income + verbal, gamble)
plot(model1)
# load data
gamble <- (data=teengamb)
# run regression on gamble with specified predictors
model1 <- lm(gamble ~ sex + status + income + verbal, gamble)
#check the constant variance assumption
par(mfrow = c(2,2), plot(model1))
plot(model1)
#####################
# load libraries
# set wd
# clear global .envir
#####################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
# ex: stringr
# lapply(c("stringr"),  pkgTest)
lapply(c("faraway"),  pkgTest)
# set working directory
setwd("~/Documents/GitHub/QTM200Spring2020/problem_sets/PS5")
#####################
# Problem 1
#####################
# load data
gamble <- (data=teengamb)
# run regression on gamble with specified predictors
model1 <- lm(gamble ~ sex + status + income + verbal, gamble)
#check the constant variance assumption
par(mfrow = c(2,2), plot(model1))
plot(model1)
plot(model1)
plot(model1)
plot(model1)
#check the constant variance, normality assumptions and large leverage points
par(mfrow = c(2,2), plot(model1))
par(mfrow = c(2,2), plot(model1))
outlierTest(model1)
libary("car")
library(car)
outlierTest(model1)
outlierTest(model1, colnames(gamble))
outlierTest(model1, row.names(gamble))
outlierTest(model1)
outlierTest(model1)
outlierTest(model1, row.names(model1))
par(mfrow = c(2,2), plot(model1))
#check the constant variance, normality assumptions and large leverage points
plot(model1)
#check the constant variance, normality assumptions and large leverage points
plot(model1)
#check the constant variance, normality assumptions and large leverage points
plot(model1)
#check the constant variance, normality assumptions and large leverage points
residualPlot(model1)
#####################
# load libraries
# set wd
# clear global .envir
#####################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
library(car)
# ex: stringr
# lapply(c("stringr"),  pkgTest)
lapply(c("faraway"),  pkgTest)
# set working directory
setwd("C:/Users/yyh/Documents/GitHub/QTM200Spring2020/problem_sets/PS5")
#####################
# Problem 1
#####################
# load data
gamble <- (data=teengamb)
# run regression on gamble with specified predictors
model1 <- lm(gamble ~ sex + status + income + verbal, gamble)
#check the constant variance, normality assumptions and large leverage points
residualPlot(model1)
plot(model1)
outlierTest(model1, row.names(model1))
#####################
# load libraries
# set wd
# clear global .envir
#####################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
library(car)
# ex: stringr
# lapply(c("stringr"),  pkgTest)
lapply(c("faraway"),  pkgTest)
# set working directory
setwd("C:/Users/yyh/Documents/GitHub/QTM200Spring2020/problem_sets/PS5")
#####################
# Problem 1
#####################
# load data
gamble <- (data=teengamb)
# run regression on gamble with specified predictors
model1 <- lm(gamble ~ sex + status + income + verbal, gamble)
#check the constant variance, normality assumptions and large leverage points
residualPlot(model1)
plot(model1)
outlierTest(model1, row.names(model1))
#check the constant variance, normality assumptions and large leverage points
residualPlot(model1)
#check the constant variance, normality assumptions and large leverage points
par(frow = c(2,2),plot(model1))
#check the constant variance, normality assumptions and large leverage points
par(mfrow = c(2,2);,plot(model1))
#check the constant variance, normality assumptions and large leverage points
par(mfrow = c(2,2);,plot(model1))
#check the constant variance, normality assumptions and large leverage points
par(mfrow = c(2,2); plot(model1))
#check the constant variance, normality assumptions and large leverage points
par(mfrow = c(2,2), plot(model1))
#check the constant variance, normality assumptions and large leverage points
par(mfrow = c(2,2), plot(model1))
outlierTest(model1, row.names(model1))
# run regression on gamble with specified predictors
model1 <- lm(gamble ~ sex + status + income + verbal, gamble)
# load data
gamble <- (data=teengamb)
#Plotting cook's distances
summary(model1)
plot (cooks.distance(model1), pch = 16, cex = 2)
abline(h=4/(45-2-1), lty = 2)
#check the constant variance, normality assumptions and large leverage points
?par
#check the constant variance, normality assumptions and large leverage points
?mfrow
#check the constant variance, normality assumptions and large leverage points
?mfrow
#check the constant variance, normality assumptions and large leverage points
??mfrow
n2mfrow(nr.plots)
n2mfrow(1)
plot (cooks.distance(model1), pch = 16, cex = 2)
par(mfrow = 1)
par(n2mfrow = 1)
par(n2from(1))
par(n2frow(1))
par(mfrow = c(1,1))
plot (cooks.distance(model1), pch = 16, cex = 2)
abline(h=4/(45-2-1), lty = 2)
identify(1:45, cooks.distance(model1), row.names(status))
identify(1:45, cooks.distance(model1), row.names(status))
abline(h=4/(47-2-1), lty = 2)
identify(1:47, cooks.distance(model1), row.names(status))
identify(1:47, cooks.distance(model1), row.names(24))
identify(1:47, cooks.distance(model1), row.names(gamble))
# load data
gamble <- (data=teengamb)
# run regression on gamble with specified predictors
model1 <- lm(gamble ~ sex + status + income + verbal, gamble)
#check the constant variance, normality assumptions and large leverage points
par(mfrow = c(2,2), plot(model1))
#check the constant variance, normality assumptions and large leverage points
par(mfrow = c(1,2), plot(model1))
#check the constant variance, normality assumptions and large leverage points
par(mfrow = c(2,1), plot(model1))
par(mfrow = c(1,1))
par(mfrow = c(1,1))
#check the constant variance, normality assumptions and large leverage points
plot(model1)
#check the constant variance, normality assumptions and large leverage points
par(mfrow = c(2,2), plot(model1))
abline(h=4/(47-2-1), lty = 2)
plot (cooks.distance(model1), pch = 16, cex = 2)
par(mfrow = c(1,1))
plot (cooks.distance(model1), pch = 16, cex = 2)
abline(h=4/(47-2-1), lty = 2)
identify(1:47, cooks.distance(model1))
identify(1:47, cooks.distance(model1), row.names(24))
identify(1:47, cooks.distance(model1), row.names(gamble))
abline(h=4/(47-2-1), lty = 2)
#Plotting cook's distances
summary(model1)
plot (cooks.distance(model1), pch = 16, cex = 2)
abline(h=4/(47-5-1), lty = 2)
abline(h=4/(47-4-1), lty = 2)
plot (cooks.distance(model1), pch = 16, cex = 2)
abline(h=4/(47-4-1), lty = 2)
# run regression on gamble with specified predictors
model1 <- lm(gamble ~ sex + status + income + verbal, gamble)
par(mfrow = c(1,1))
#Plotting cook's distances
summary(model1)
plot (cooks.distance(model1), pch = 16, cex = 2)
abline(h=4/(47-4-1), lty = 2) #for cook's distance > 4/(n-k-1)
identify(1:47, cooks.distance(model1), row.names(gamble))
identify(cooks.distance(model1), 1:47, row.names(gamble))
identify(cooks.distance(model1), 1:47, row.names(gamble))
#Plotting cook's distances
summary(model1)
plot (cooks.distance(model1), pch = 16, cex = 2)
abline(h=4/(47-4-1), lty = 2) #for cook's distance > 4/(n-k-1)
plot (cooks.distance(model1), pch = 16, cex = 1)
#Plotting cook's distances
summary(model1)
plot (cooks.distance(model1), pch = 16, cex = 1)
abline(h=4/(47-4-1), lty = 2) #for cook's distance > 4/(n-k-1)
identify(cooks.distance(model1), 1:47, row.names(gamble))
identify(1:47, cooks.distance(model1), row.names(gamble))
identify(1:47, cooks.distance(model1), row.names(gamble))
#Plotting cook's distances
summary(model1)
plot (cooks.distance(model1), pch = 16, cex = 1)
abline(h=4/(47-4-1), lty = 2) #for cook's distance > 4/(n-k-1)
identify(1:47, cooks.distance(model1), row.names(gamble))
#Outlier test
outlierTest(model1, row.names(gamble))
# here is where you load any necessary packages
library(car)
#Outlier test
outlierTest(model1, row.names(gamble))
#Outlier test
outlierTest(model1, row.names(gamble))
# run regression on gamble with specified predictors
model1 <- lm(gamble ~ sex + status + income + verbal, gamble)
# load data
gamble <- (data=teengamb)
lapply(c("faraway"),  pkgTest)
# load data
gamble <- (data=teengamb)
# run regression on gamble with specified predictors
model1 <- lm(gamble ~ sex + status + income + verbal, gamble)
#check the constant variance, normality assumptions and large leverage points
par(mfrow = c(2,2), plot(model1))
abline(h=4/(47-4-1), lty = 2) #for cook's distance > 4/(n-k-1)
identify(1:47, cooks.distance(model1), row.names(gamble))
#Outlier test
outlierTest(model1, row.names(gamble))
#Outlier test
outlierTest(model1, row.names(gamble))
#Outlier test
outlierTest(model1, row.names(model1))
#check the constant variance, normality assumptions and large leverage points
qqplot(model1)
#check the constant variance, normality assumptions and large leverage points
plot(model1)
par(mfrow = c(1,1))
#check the constant variance, normality assumptions and large leverage points
plot(model1)
#Plotting cook's distances
summary(model1)
#Plotting hat-values
plot(hatvalues(model1), pch = 16, cex = 1)
abline(h = 2*4/47, lty = 2)
abline(h= 3*4/47, lty = 2)
identify(1:47, hatvalues(model1), row.names(gamble))
#Plotting hat-values
plot(hatvalues(model1), pch = 16, cex = 1)
abline(h = 2*4/47, lty = 2)
abline(h= 3*4/47, lty = 2)
#Plotting hat-values
plot(hatvalues(model1), pch = 16, cex = 2)
#Plotting hat-values
plot(hatvalues(model1), pch = 16, cex = 1.5)
abline(h = 2*4/47, lty = 2)
abline(h= 3*4/47, lty = 2)
#Plotting hat-values
plot(hatvalues(model1), pch = 16, cex = 1)
abline(h = 2*4/47, lty = 2)
abline(h= 3*4/47, lty = 2)
identify(1:47, hatvalues(model1), row.names(gamble))
#Plotting hat-values
plot(hatvalues(model1), pch = 16, cex = 1, main = "Hat values plot for regression model 'gamble'")
abline(h = 2*4/47, lty = 2)
abline(h= 3*4/47, lty = 2)
identify(1:47, hatvalues(model1), row.names(gamble))
plot (cooks.distance(model1), pch = 16, cex = 1)
abline(h=4/(47-4-1), lty = 2) #showing any cook's distance > 4/(n-k-1)
identify(1:47, cooks.distance(model1), row.names(gamble)) #finding which observations are the outliers
#Outlier test
outlierTest(model1, row.names(model1))
#Creating a bubble plot
plot(hatvalues(model1), rstudent(prestige_reg1), type = "n")
#Creating a bubble plot
plot(hatvalues(model1), rstudent(model1), type = "n")
cook <− sqrt(cooks.distance(model1))
points(hatvalues(model1), rstudent(model1), cex = 10*cook/max(cook))
abline(h = c( −2 ,0 ,2 ), lty = 2)
abline(v = c(2, 3) * 4/ 47, lty = 2)
abline(h = c(-2, 0, 2), lty = 2)
#Creating a bubble plot
plot(hatvalues(model1), rstudent(model1), type = "n")
cook <- sqrt(cooks.distance(model1))
points(hatvalues(model1), rstudent(model1), cex = 10*cook/max(cook))
abline(h = c(-2, 0, 2), lty = 2)
abline(v = c(2, 3) * 4/ 47, lty = 2)
identify(hatvalues(model1), rstudent(model1), row.names (gamble))
#Creating a bubble plot
plot(hatvalues(model1), rstudent(model1), type = "n", main = "individual influences in regression model 'gamble'")
#Creating a bubble plot
plot(hatvalues(model1), rstudent(model1), type = "n", main = "Individual influences in regression model 'gamble'")
cook <- sqrt(cooks.distance(model1))
points(hatvalues(model1), rstudent(model1), cex = 10*cook/max(cook))
abline(h = c(-2, 0, 2), lty = 2)
abline(v = c(2, 3) * 4/ 47, lty = 2)
identify(hatvalues(model1), rstudent(model1), row.names (gamble))
#Creating a bubble plot
plot(hatvalues(model1), rstudent(model1), type = "n", main = "Individual influences in regression model 'gamble'",
xlab = "h values", ylab = "studentized residuals")
cook <- sqrt(cooks.distance(model1))
points(hatvalues(model1), rstudent(model1), cex = 10*cook/max(cook))
abline(h = c(-2, 0, 2), lty = 2)
abline(v = c(2, 3) * 4/ 47, lty = 2)
identify(hatvalues(model1), rstudent(model1), row.names (gamble))
